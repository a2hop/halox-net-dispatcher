name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF#refs/tags/v}
            VERSION=${VERSION#refs/tags/}  # Also handle tags without 'v' prefix
          else
            # For non-tagged builds, get latest release version
            LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // empty')
            if [ -n "$LATEST_RELEASE" ]; then
              # Remove 'v' prefix if present and use latest release version
              VERSION=${LATEST_RELEASE#v}
              echo "Using latest release version: $VERSION"
            else
              # Only use 1.0.0 if no releases exist at all
              VERSION="1.0.0"
              echo "No releases found, using default version: $VERSION"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "deb_filename=halox-net-dispatcher-${VERSION}_amd64.deb" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binary
        run: go build -v -o halox-net-dispatcher .

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev fakeroot

      - name: Create Debian package structure
        run: |
          mkdir -p debian-package/DEBIAN
          mkdir -p debian-package/usr/local/bin
          mkdir -p debian-package/etc/systemd/system
          mkdir -p debian-package/etc/halox-net-dispatcher
          mkdir -p debian-package/usr/lib/halox-net-dispatcher
          
          # Copy binary
          cp halox-net-dispatcher debian-package/usr/local/bin/
          chmod +x debian-package/usr/local/bin/halox-net-dispatcher
          
          # Copy systemd service file
          cp halox-net-dispatcher.service debian-package/etc/systemd/system/
          
          # Create control file
          cat > debian-package/DEBIAN/control << EOF
          Package: halox-net-dispatcher
          Version: ${{ steps.version.outputs.version }}
          Section: net
          Priority: optional
          Architecture: amd64
          Maintainer: a2hop 
          Description: HaloX Network Dispatcher Service
           A Go implementation of networkd-dispatcher that monitors systemd-networkd
           for network state changes and executes scripts accordingly.
           .
           Features include D-Bus monitoring, script execution, socket broadcasting,
           and systemd integration.
          Depends: systemd
          EOF
          
          # Create postinst script
          cat > debian-package/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # Check if this is an upgrade and if service was running
          WAS_RUNNING=false
          if [ "$1" = "configure" ] && [ -n "$2" ]; then
              # This is an upgrade ($2 contains the old version)
              if systemctl is-active --quiet halox-net-dispatcher 2>/dev/null; then
                  WAS_RUNNING=true
              fi
          fi
          
          # Reload systemd daemon
          systemctl daemon-reload
          
          # Enable service
          systemctl enable halox-net-dispatcher || true
          
          # Start or restart service based on context
          if [ "$WAS_RUNNING" = "true" ]; then
              echo "Restarting HaloX Network Dispatcher service..."
              systemctl restart halox-net-dispatcher || true
          elif [ "$1" = "configure" ] && [ -z "$2" ]; then
              # Fresh installation - don't start automatically
              echo "HaloX Network Dispatcher installed successfully."
              echo "To start the service, run: sudo systemctl start halox-net-dispatcher"
          fi
          EOF
          chmod +x debian-package/DEBIAN/postinst
          
          # Create prerm script
          cat > debian-package/DEBIAN/prerm << 'EOF'
          #!/bin/bash
          set -e
          
          # Only stop service on removal, not on upgrade
          if [ "$1" = "remove" ]; then
              systemctl stop halox-net-dispatcher || true
              systemctl disable halox-net-dispatcher || true
          fi
          EOF
          chmod +x debian-package/DEBIAN/prerm

      - name: Build Debian package
        run: |
          fakeroot dpkg-deb --build debian-package ${{ steps.version.outputs.deb_filename }}

      - name: Get latest release
        id: latest_release
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            if (releases.length === 0) {
              core.setOutput('has_release', 'false');
              console.log('No releases found - skipping release upload');
              return;
            }
            
            const latestRelease = releases[0];
            core.setOutput('has_release', 'true');
            core.setOutput('release_id', latestRelease.id);
            core.setOutput('release_tag', latestRelease.tag_name);

      - name: Check if assets exist
        id: check_assets
        if: steps.latest_release.outputs.has_release == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = ${{ steps.latest_release.outputs.release_id }};
            
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });
            
            const binaryAsset = assets.find(asset => asset.name === 'halox-net-dispatcher');
            const debAsset = assets.find(asset => asset.name === '${{ steps.version.outputs.deb_filename }}');
            
            if (binaryAsset) {
              core.setOutput('binary_asset_id', binaryAsset.id);
              core.setOutput('binary_exists', 'true');
            } else {
              core.setOutput('binary_exists', 'false');
            }
            
            if (debAsset) {
              core.setOutput('deb_asset_id', debAsset.id);
              core.setOutput('deb_exists', 'true');
            } else {
              core.setOutput('deb_exists', 'false');
            }

      - name: Delete existing assets if they exist
        if: steps.latest_release.outputs.has_release == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const binaryExists = '${{ steps.check_assets.outputs.binary_exists }}' === 'true';
            const debExists = '${{ steps.check_assets.outputs.deb_exists }}' === 'true';
            
            if (binaryExists) {
              const binaryAssetId = '${{ steps.check_assets.outputs.binary_asset_id }}';
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: parseInt(binaryAssetId)
              });
            }
            
            if (debExists) {
              const debAssetId = '${{ steps.check_assets.outputs.deb_asset_id }}';
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: parseInt(debAssetId)
              });
            }

      - name: Upload assets to release
        if: steps.latest_release.outputs.has_release == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const releaseId = '${{ steps.latest_release.outputs.release_id }}';
            
            // Upload binary
            const binaryData = fs.readFileSync('./halox-net-dispatcher');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: parseInt(releaseId),
              name: 'halox-net-dispatcher',
              data: binaryData
            });
            
            // Upload Debian package
            const debData = fs.readFileSync('./${{ steps.version.outputs.deb_filename }}');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: parseInt(releaseId),
              name: '${{ steps.version.outputs.deb_filename }}',
              data: debData
            });

      - name: Upload artifacts (no release)
        if: steps.latest_release.outputs.has_release == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: halox-net-dispatcher-build
          path: |
            halox-net-dispatcher
            ${{ steps.version.outputs.deb_filename }}
          retention-days: 30
